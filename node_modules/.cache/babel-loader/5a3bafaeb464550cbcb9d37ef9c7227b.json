{"ast":null,"code":"import _objectSpread from\"/Users/aggzagoura/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";// import { MachineConfig, send, Action, assign } from \"xstate\";\n// import { isBuiltInEvent } from \"xstate/lib/utils\";\n// function say(text: string): Action<SDSContext, SDSEvent> {\n//     return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n// }\n// function listen(): Action<SDSContext, SDSEvent> {\n//     return send('LISTEN')\n// }\n// const grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n//     \"John\": { person: \"John Appleseed\" },\n//     \"Mary\": { person: \"Mary Zagoura\" },\n//     \"Nick\": { person: \"Nick Katapodis\" },\n//     \"Samantha\": { person: \"Samantha Meyers\" },\n//     \"Anna\": { person: \"Anna Heathrow\" },\n//     \"James\": { person: \"James Smith\" },\n//     \"on Friday\": { day: \"Friday\" },\n//     \"on Monday\": { day: \"Monday\" },\n//     \"on Tuesday\": { day: \"Tuesday\" },\n//     \"on Saturday\": { day: \"Saturday\" },\n//     \"at ten\": { time: \"10:00\" },\n//     \"at 10\": { time: \"10:00\" },\n//     \"at eight\": { time: \"8:00\" },\n//     \"at 8\": { time: \"8:00\"},\n//     \"at eleven\": { time: \"11:00\" },\n//     \"at 11\": { time: \"11:00\" },\n//     \"at twelve\": { time: \"12:00\" },\n//     \"at 12\": { time: \"12:00\" }\n// }\n// const grammar2= { \"yes\": true,\n//                   \"Yes\": true,\n//                   \"of course\": true,\n//                   \"Of course\": true,\n//                   \"no\": false,\n//                   \"No\":false,\n//                   \"no way\": false,\n//                   \"No way\": false\n// }\n// export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n//     initial: 'init',\n//     states: {\n//         init: {\n//             on: {\n//                 CLICK: 'welcome'\n//             }\n//         },\n//         welcome: {\n//             initial: \"prompt\",\n//             on: { ENDSPEECH: \"who\" },\n//             states: {\n//                 prompt: { entry: say(\"Let's create an appointment\") }\n//             }\n//         },\n//         who: {\n//             initial: \"prompt\",\n//             on: {\n//                 RECOGNISED: [{\n//                     cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n//                     actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n//                     target: \"day\"\n//                 },\n//                 { target: \".nomatch\" }]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: say(\"Who are you meeting with?\"),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen()\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Sorry I don't know them\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         day: {\n//             initial: \"prompt\",\n//             on: { \n//                 RECOGNISED: [{\n//                     cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n//                     actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n//                     target: \"wholeday\"   \n//                 },\n//                 { target: \".nomatch\"}]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: send((context) => ({\n//                         type: \"SPEAK\",\n//                         value: `OK. ${context.person}. On which day is your meeting?`\n//                     })),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen(),\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Sorry I don't know which day you are talking about\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         wholeday: {\n//                 initial: \"prompt\",\n//                 on: {\n//                     RECOGNISED: [{\n//                         cond: (context) => grammar2[context.recResult] === true,\n//                         target: \"notime\"},\n//                         {\n//                         cond: (context) => grammar2[context.recResult] === false,\n//                         target: \"whattime\"\n//                     },\n//                     { target: \".nomatch\"}]\n//                 },\n//                 states: {\n//                     prompt: {\n//                         entry: send((context) => ({\n// \t\t\t                type: \"SPEAK\",\n// \t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n// \t\t\t            })),\n// \t\t\t            on: { ENDSPEECH: \"ask\" }\n//                     },\n//                     ask: {\n//                         entry: listen()\n//                     },\n//                     nomatch: {\n// \t\t\t            entry: say(\"Please repeat it again\"),\n// \t\t                on: { ENDSPEECH: \"prompt\" }\n//                     }\n//                 }\n//             },\n//             notime: {\n//                     initial: \"prompt\",\n//                     on: {\n//                         RECOGNISED: [{ \n//                             cond: (context) => grammar2[context.recResult] === true,\n//                             target: \"Finished\"},\n//                             {\n//                              cond: (context) => grammar2[\"context.recResult\"] === false,\n//                             target: \"who\"\n//                         },\n//                         {target: \".nomatch\"}]\n//                     },\n//                     states: {\n//                         prompt: {\n//                             entry: send((context) => ({\n//                                 type: \"SPEAK\",\n// \t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`  \n//                             })),\n//                             on: { ENDSPEECH: \"ask\"}\n//                         },\n//                         ask: {\n//                             entry: listen()\n//                         },\n//                         nomatch: {\n//                             entry: say(\"Please repeat it again\"),\n//                             on: { ENDSPEECH: \"prompt\" }\n//                         }\n//                     }\n//                 },\n//                 whattime: {\n//                     initial: \"prompt\",\n//                     on: {\n//                         RECOGNISED: [{\n// \t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n// \t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n// \t\t\t\t\t\t\ttarget: \"withtime\"\n//                         },\n//                         { target: \".nomatch\"}]\n//                     },\n//                     states: {\n//                         prompt: { entry: say(\"What time is your meeting\"),\n// \t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n//                     },\n//                     ask: {\n//                         entry: listen()\n//                 },\n//                 nomatch: {\n// \t\t\t\t\tentry: say(\"Please repeat it again\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         withtime: {\n//             initial: \"prompt\",\n//             on: {\n//                 RECOGNISED: [{ \n// \t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n// \t\t\t\t\ttarget: \"Finished\"},\n// \t\t\t\t\t{\n// \t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n// \t\t\t\t\ttarget: \"who\"\n//                 },\n//                 { target: \".nomatch\" }]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: send((context) => ({\n//                         type: \"SPEAK\",\n//                         value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n//                     })),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen()\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Please repeat it again\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//                 Finished: {\n//                         initial: \"prompt\",\n//                         on: { ENDSPEECH: \"init\" },\n//                         states: {\n//                             prompt: { entry: say(\"Your appointment has been created!\")\n//                            },\n//                         }\n//                     }\n//                 }\n//             }) \nlet a=grammar2[\"yes\"];let b=grammar2[\"no\"];function promptAndAsk(prompt){return{initial:'prompt',states:{prompt:{entry:say(prompt),on:{ENDSPEECH:'ask'}},ask:{entry:send('LISTEN')}}};}export const dmMachine={initial:'init',states:{init:{on:{CLICK:'welcome'}},welcome:_objectSpread({on:{RECOGNISED:{target:\"query\",actions:assign(context=>{return{option:context.recResult};})}}},promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")),query:{invoke:{id:'rasa',src:(context,event)=>nluRequest(context.option),onDone:{target:'menu',actions:[assign((context,event)=>{return{option:event.data.intent.name};}),(context,event)=>console.log(event.data)]//actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n},onError:{target:'welcome',actions:(context,event)=>console.log(event.data)}}},menu:{initial:\"prompt\",on:{ENDSPEECH:[{target:'todo',cond:context=>context.option==='todo'},{target:'timer',cond:context=>context.option==='timer'},{target:'appointment',cond:context=>context.option==='appointment'}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. I understand.\"}))}/*            nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */}},todo:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create a to do item\"}))}}},timer:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create a timer\"}))}}},appointment:{initial:\"prompt\",on:{ENDSPEECH:\"who\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create an appointment\"}))}}},who:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"person\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{person:grammar[context.recResult].person};}),target:\"day\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"Who are you meeting with?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know them\"),on:{ENDSPEECH:\"prompt\"}}}},day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"day\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{day:grammar[context.recResult].day};}),target:\"wholeday\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.person,\". On which day is your meeting?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I didn't understand\"),on:{ENDSPEECH:\"prompt\"}}}},wholeday:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===b,target:\"time\"},{cond:context=>grammar2[context.recResult]===a,target:\"confirm_meeting_whole_day\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.person,\" on \").concat(context.day,\". Will it take the whole day?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand\"),on:{ENDSPEECH:\"prompt\"}}}},time:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"time\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{time:grammar[context.recResult].time};}),target:\"confirm_time\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.day,\". What time is your meeting?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know that\"),on:{ENDSPEECH:\"prompt\"}}}},confirm_meeting_whole_day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===b,target:\"init\"},{cond:context=>grammar2[context.recResult]===a,target:\"confirmed\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" for the whole day?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand\"),on:{ENDSPEECH:\"prompt\"}}}},confirm_time:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===b,target:\"who\"},{cond:context=>grammar2[context.recResult]===a,target:\"confirmed\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" at \").concat(context.time,\"?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand\"),on:{ENDSPEECH:\"prompt\"}}}},confirmed:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Your appointment has been created!\"}))}}}}};/* RASA API\n *  */const proxyurl=\"https://cors-anywhere.herokuapp.com/\";const rasaurl='https://rasa-nlu-app.herokuapp.com/model/parse';const nluRequest=text=>fetch(new Request(proxyurl+rasaurl,{method:'POST',headers:{'Origin':'http://localhost:3000/react-xstate-colourchanger'},// only required with proxy\nbody:\"{\\\"text\\\": \\\"\".concat(text,\"\\\"}\")})).then(data=>data.json());","map":{"version":3,"sources":["/Users/aggzagoura/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["a","grammar2","b","promptAndAsk","prompt","initial","states","entry","say","on","ENDSPEECH","ask","send","dmMachine","init","CLICK","welcome","RECOGNISED","target","actions","assign","context","option","recResult","query","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","type","value","todo","timer","appointment","who","grammar","person","listen","nomatch","day","wholeday","time","confirm_meeting_whole_day","confirm_time","confirmed","proxyurl","rasaurl","text","fetch","Request","method","headers","body","then","json"],"mappings":"kKAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAIA,CAAAA,CAAC,CAAGC,QAAQ,CAAC,KAAD,CAAhB,CACA,GAAIC,CAAAA,CAAC,CAAGD,QAAQ,CAAC,IAAD,CAAhB,CAEA,QAASE,CAAAA,YAAT,CAAsBC,MAAtB,CAAgF,CAC5E,MAAQ,CACJC,OAAO,CAAE,QADL,CAEJC,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEC,GAAG,CAACJ,MAAD,CADN,CAEJK,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CAFA,CADJ,CAKJC,GAAG,CAAE,CACDJ,KAAK,CAAEK,IAAI,CAAC,QAAD,CADV,CALD,CAFJ,CAAR,CAWH,CAGD,MAAO,MAAMC,CAAAA,SAAmD,CAAI,CAEhER,OAAO,CAAE,MAFuD,CAGhEC,MAAM,CAAE,CACJQ,IAAI,CAAE,CACFL,EAAE,CAAE,CACAM,KAAK,CAAE,SADP,CADF,CADF,CAOJC,OAAO,gBACHP,EAAE,CAAE,CACAQ,UAAU,CAAE,CACRC,MAAM,CAAE,OADA,CAERC,OAAO,CAAEC,MAAM,CAAEC,OAAD,EAAa,CAAE,MAAO,CAAEC,MAAM,CAAED,OAAO,CAACE,SAAlB,CAAP,CAAsC,CAAtD,CAFP,CADZ,CADD,EAOQpB,YAAY,CAAC,8EAAD,CAPpB,CAPH,CAkBJqB,KAAK,CAAE,CACHC,MAAM,CAAE,CACJC,EAAE,CAAE,MADA,CAEJC,GAAG,CAAE,CAACN,OAAD,CAAUO,KAAV,GAAoBC,UAAU,CAACR,OAAO,CAACC,MAAT,CAF/B,CAGJQ,MAAM,CAAE,CACJZ,MAAM,CAAE,MADJ,CAEJC,OAAO,CAAE,CAACC,MAAM,CAAC,CAACC,OAAD,CAAUO,KAAV,GAAoB,CAAE,MAAQ,CAACN,MAAM,CAAEM,KAAK,CAACG,IAAN,CAAWC,MAAX,CAAkBC,IAA3B,CAAR,CAA0C,CAAjE,CAAP,CACT,CAACZ,OAAD,CAAsBO,KAAtB,GAAqCM,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACG,IAAlB,CAD5B,CAET;AAJI,CAHJ,CAUJK,OAAO,CAAE,CACLlB,MAAM,CAAE,SADH,CAELC,OAAO,CAAE,CAACE,OAAD,CAAUO,KAAV,GAAoBM,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACG,IAAlB,CAFxB,CAVL,CADL,CAlBH,CAoCJM,IAAI,CAAE,CACFhC,OAAO,CAAE,QADP,CAEFI,EAAE,CAAE,CACAC,SAAS,CAAE,CACP,CAAEQ,MAAM,CAAE,MAAV,CAAkBoB,IAAI,CAAGjB,OAAD,EAAaA,OAAO,CAACC,MAAR,GAAmB,MAAxD,CADO,CAEP,CAAEJ,MAAM,CAAE,OAAV,CAAmBoB,IAAI,CAAGjB,OAAD,EAAaA,OAAO,CAACC,MAAR,GAAmB,OAAzD,CAFO,CAGP,CAAEJ,MAAM,CAAE,aAAV,CAAyBoB,IAAI,CAAGjB,OAAD,EAAaA,OAAO,CAACC,MAAR,GAAmB,aAA/D,CAHO,CADX,CAFF,CASFhB,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEK,IAAI,CAAES,OAAD,GAAc,CACtBkB,IAAI,CAAE,OADgB,CAEtBC,KAAK,oBAFiB,CAAd,CAAD,CADP,CAMnB;AACL;AACA;AACA,YAVoB,CATN,CApCF,CA4DJC,IAAI,CAAE,CACFpC,OAAO,CAAE,QADP,CAEFI,EAAE,CAAE,CAAEC,SAAS,CAAE,MAAb,CAFF,CAGFJ,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEK,IAAI,CAAES,OAAD,GAAc,CACtBkB,IAAI,CAAE,OADgB,CAEtBC,KAAK,4BAFiB,CAAd,CAAD,CADP,CADJ,CAHN,CA5DF,CAwEJE,KAAK,CAAE,CACHrC,OAAO,CAAE,QADN,CAEHI,EAAE,CAAE,CAAEC,SAAS,CAAE,MAAb,CAFD,CAGHJ,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEK,IAAI,CAAES,OAAD,GAAc,CACtBkB,IAAI,CAAE,OADgB,CAEtBC,KAAK,uBAFiB,CAAd,CAAD,CADP,CADJ,CAHL,CAxEH,CAqFJG,WAAW,CAAE,CACTtC,OAAO,CAAE,QADA,CAETI,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CAFK,CAGTJ,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEK,IAAI,CAAES,OAAD,GAAc,CACtBkB,IAAI,CAAE,OADgB,CAEtBC,KAAK,8BAFiB,CAAd,CAAD,CADP,CADJ,CAHC,CArFT,CAgGJI,GAAG,CAAE,CACDvC,OAAO,CAAE,QADR,CAEDI,EAAE,CAAE,CACAQ,UAAU,CAAE,CAAC,CACxBqB,IAAI,CAAGjB,OAAD,EAAa,WAAawB,OAAO,CAACxB,OAAO,CAACE,SAAT,CAAP,EAA8B,EAA3C,CADK,CAETJ,OAAO,CAAEC,MAAM,CAAEC,OAAD,EAAa,CAAE,MAAO,CAAEyB,MAAM,CAAED,OAAO,CAACxB,OAAO,CAACE,SAAT,CAAP,CAA2BuB,MAArC,CAAP,CAAsD,CAAtE,CAFN,CAGT5B,MAAM,CAAE,KAHC,CAAD,CAMZ,CAAEA,MAAM,CAAE,UAAV,CANY,CADZ,CAFH,CAWDZ,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEC,GAAG,CAAC,2BAAD,CADN,CAEJC,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CAFA,CADJ,CAKJC,GAAG,CAAE,CACDJ,KAAK,CAAEwC,MAAM,EADZ,CALD,CAQJC,OAAO,CAAE,CACLzC,KAAK,CAAEC,GAAG,CAAC,yBAAD,CADL,CAELC,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFC,CARL,CAXP,CAhGD,CAyHJuC,GAAG,CAAE,CACD5C,OAAO,CAAE,QADR,CAEDI,EAAE,CAAE,CACAQ,UAAU,CAAE,CAAC,CACTqB,IAAI,CAAGjB,OAAD,EAAa,QAAUwB,OAAO,CAACxB,OAAO,CAACE,SAAT,CAAP,EAA8B,EAAxC,CADV,CAETJ,OAAO,CAAEC,MAAM,CAAEC,OAAD,EAAa,CAAE,MAAO,CAAE4B,GAAG,CAAEJ,OAAO,CAACxB,OAAO,CAACE,SAAT,CAAP,CAA2B0B,GAAlC,CAAP,CAAgD,CAAhE,CAFN,CAGT/B,MAAM,CAAE,UAHC,CAAD,CAKZ,CAAEA,MAAM,CAAE,UAAV,CALY,CADZ,CAFH,CAUDZ,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEK,IAAI,CAAES,OAAD,GAAc,CACtBkB,IAAI,CAAE,OADgB,CAEtBC,KAAK,eAASnB,OAAO,CAACyB,MAAjB,mCAFiB,CAAd,CAAD,CADP,CAKJrC,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CALA,CADJ,CAQJC,GAAG,CAAE,CACDJ,KAAK,CAAEwC,MAAM,EADZ,CARD,CAWJC,OAAO,CAAE,CACLzC,KAAK,CAAEC,GAAG,CAAC,2BAAD,CADL,CAELC,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFC,CAXL,CAVP,CAzHD,CAoJJwC,QAAQ,CAAE,CACN7C,OAAO,CAAE,QADH,CAENI,EAAE,CAAE,CACAQ,UAAU,CAAE,CAAC,CAACqB,IAAI,CAAGjB,OAAD,EAAcpB,QAAQ,CAACoB,OAAO,CAACE,SAAT,CAAR,GAAgCrB,CAArD,CACTgB,MAAM,CAAE,MADC,CAAD,CAG1B,CAACoB,IAAI,CAAGjB,OAAD,EAAcpB,QAAQ,CAACoB,OAAO,CAACE,SAAT,CAAR,GAAgCvB,CAArD,CACAkB,MAAM,CAAE,2BADR,CAH0B,CAMZ,CAAEA,MAAM,CAAE,UAAV,CANY,CADZ,CAFE,CAWNZ,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEK,IAAI,CAAES,OAAD,GAAc,CACtBkB,IAAI,CAAE,OADgB,CAEtBC,KAAK,eAASnB,OAAO,CAACyB,MAAjB,gBAA8BzB,OAAO,CAAC4B,GAAtC,iCAFiB,CAAd,CAAD,CADP,CAKlBxC,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CALc,CADJ,CAQlBC,GAAG,CAAE,CACAJ,KAAK,CAAEwC,MAAM,EADb,CARa,CAWfC,OAAO,CAAE,CACRzC,KAAK,CAAEC,GAAG,CAAC,2BAAD,CADF,CAEZC,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFQ,CAXM,CAXF,CApJN,CAgLJyC,IAAI,CAAE,CACF9C,OAAO,CAAE,QADP,CAEFI,EAAE,CAAE,CACAQ,UAAU,CAAE,CAAC,CACTqB,IAAI,CAAGjB,OAAD,EAAa,SAAWwB,OAAO,CAACxB,OAAO,CAACE,SAAT,CAAP,EAA8B,EAAzC,CADV,CAETJ,OAAO,CAAEC,MAAM,CAAEC,OAAD,EAAa,CAAE,MAAO,CAAE8B,IAAI,CAAEN,OAAO,CAACxB,OAAO,CAACE,SAAT,CAAP,CAA2B4B,IAAnC,CAAP,CAAkD,CAAlE,CAFN,CAGTjC,MAAM,CAAE,cAHC,CAAD,CAMZ,CAAEA,MAAM,CAAE,UAAV,CANY,CADZ,CAFF,CAWFZ,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEK,IAAI,CAAES,OAAD,GAAc,CACtBkB,IAAI,CAAE,OADgB,CAEtBC,KAAK,eAASnB,OAAO,CAAC4B,GAAjB,gCAFiB,CAAd,CAAD,CADP,CAMZxC,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CANQ,CADJ,CASZC,GAAG,CAAE,CACDJ,KAAK,CAAEwC,MAAM,EADZ,CATO,CAYZC,OAAO,CAAE,CACLzC,KAAK,CAAEC,GAAG,CAAC,yBAAD,CADL,CAETC,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFK,CAZG,CAXN,CAhLF,CA6MJ0C,yBAAyB,CAAE,CACvB/C,OAAO,CAAE,QADc,CAEvBI,EAAE,CAAE,CACAQ,UAAU,CAAE,CAAC,CAACqB,IAAI,CAAGjB,OAAD,EAAcpB,QAAQ,CAACoB,OAAO,CAACE,SAAT,CAAR,GAAgCrB,CAArD,CACTgB,MAAM,CAAE,MADC,CAAD,CAG1B,CAACoB,IAAI,CAAGjB,OAAD,EAAcpB,QAAQ,CAACoB,OAAO,CAACE,SAAT,CAAR,GAAgCvB,CAArD,CACAkB,MAAM,CAAE,WADR,CAH0B,CAMZ,CAAEA,MAAM,CAAE,UAAV,CANY,CADZ,CAFmB,CAYvBZ,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEK,IAAI,CAAES,OAAD,GAAc,CACtBkB,IAAI,CAAE,OADgB,CAEtBC,KAAK,qDAA+CnB,OAAO,CAACyB,MAAvD,gBAAoEzB,OAAO,CAAC4B,GAA5E,uBAFiB,CAAd,CAAD,CADP,CAKlBxC,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CALc,CADJ,CAQlBC,GAAG,CAAE,CACAJ,KAAK,CAAEwC,MAAM,EADb,CARa,CAWfC,OAAO,CAAE,CACRzC,KAAK,CAAEC,GAAG,CAAC,2BAAD,CADF,CAEZC,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFQ,CAXM,CAZe,CA7MvB,CA2OR2C,YAAY,CAAE,CACVhD,OAAO,CAAE,QADC,CAEVI,EAAE,CAAG,CACDQ,UAAU,CAAE,CAAC,CAACqB,IAAI,CAAGjB,OAAD,EAAcpB,QAAQ,CAACoB,OAAO,CAACE,SAAT,CAAR,GAAgCrB,CAArD,CACTgB,MAAM,CAAE,KADC,CAAD,CAGpB,CAACoB,IAAI,CAAGjB,OAAD,EAAcpB,QAAQ,CAACoB,OAAO,CAACE,SAAT,CAAR,GAAgCvB,CAArD,CACAkB,MAAM,CAAE,WADR,CAHoB,CAMZ,CAAEA,MAAM,CAAE,UAAV,CANY,CADX,CAFK,CAWVZ,MAAM,CAAE,CACJF,MAAM,CAAE,CACLG,KAAK,CAAEK,IAAI,CAAES,OAAD,GAAc,CACrBkB,IAAI,CAAE,OADe,CAErBC,KAAK,qDAA+CnB,OAAO,CAACyB,MAAvD,gBAAoEzB,OAAO,CAAC4B,GAA5E,gBAAsF5B,OAAO,CAAC8B,IAA9F,KAFgB,CAAd,CAAD,CADN,CAKZ1C,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CALQ,CADJ,CAQZC,GAAG,CAAE,CACAJ,KAAK,CAAEwC,MAAM,EADb,CARO,CAWZC,OAAO,CAAE,CACLzC,KAAK,CAAEC,GAAG,CAAC,2BAAD,CADL,CAETC,EAAE,CAAE,CAAEC,SAAS,CAAE,QAAb,CAFK,CAXG,CAXE,CA3ON,CAuQR4C,SAAS,CAAE,CACPjD,OAAO,CAAE,QADF,CAEPI,EAAE,CAAE,CAAEC,SAAS,CAAE,MAAb,CAFG,CAGPJ,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEK,IAAI,CAAES,OAAD,GAAc,CACtBkB,IAAI,CAAE,OADgB,CAEtBC,KAAK,qCAFiB,CAAd,CAAD,CADP,CADJ,CAHD,CAvQH,CAHwD,CAA7D,CA2RP;AACA,MACA,KAAMe,CAAAA,QAAQ,CAAG,sCAAjB,CACA,KAAMC,CAAAA,OAAO,CAAG,gDAAhB,CACA,KAAM3B,CAAAA,UAAU,CAAI4B,IAAD,EACfC,KAAK,CAAC,GAAIC,CAAAA,OAAJ,CAAYJ,QAAQ,CAAGC,OAAvB,CAAgC,CAClCI,MAAM,CAAE,MAD0B,CAElCC,OAAO,CAAE,CAAE,SAAU,kDAAZ,CAFyB,CAEyC;AAC3EC,IAAI,wBAAeL,IAAf,OAH8B,CAAhC,CAAD,CAAL,CAKKM,IALL,CAKUhC,IAAI,EAAIA,IAAI,CAACiC,IAAL,EALlB,CADJ","sourcesContent":["// import { MachineConfig, send, Action, assign } from \"xstate\";\n// import { isBuiltInEvent } from \"xstate/lib/utils\";\n\n\n// function say(text: string): Action<SDSContext, SDSEvent> {\n//     return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n// }\n\n// function listen(): Action<SDSContext, SDSEvent> {\n//     return send('LISTEN')\n// }\n\n// const grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n//     \"John\": { person: \"John Appleseed\" },\n//     \"Mary\": { person: \"Mary Zagoura\" },\n//     \"Nick\": { person: \"Nick Katapodis\" },\n//     \"Samantha\": { person: \"Samantha Meyers\" },\n//     \"Anna\": { person: \"Anna Heathrow\" },\n//     \"James\": { person: \"James Smith\" },\n//     \"on Friday\": { day: \"Friday\" },\n//     \"on Monday\": { day: \"Monday\" },\n//     \"on Tuesday\": { day: \"Tuesday\" },\n//     \"on Saturday\": { day: \"Saturday\" },\n//     \"at ten\": { time: \"10:00\" },\n//     \"at 10\": { time: \"10:00\" },\n//     \"at eight\": { time: \"8:00\" },\n//     \"at 8\": { time: \"8:00\"},\n//     \"at eleven\": { time: \"11:00\" },\n//     \"at 11\": { time: \"11:00\" },\n//     \"at twelve\": { time: \"12:00\" },\n//     \"at 12\": { time: \"12:00\" }\n// }\n\n// const grammar2= { \"yes\": true,\n//                   \"Yes\": true,\n//                   \"of course\": true,\n//                   \"Of course\": true,\n//                   \"no\": false,\n//                   \"No\":false,\n//                   \"no way\": false,\n//                   \"No way\": false\n// }\n\n\n// export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n//     initial: 'init',\n//     states: {\n//         init: {\n//             on: {\n//                 CLICK: 'welcome'\n//             }\n//         },\n//         welcome: {\n//             initial: \"prompt\",\n//             on: { ENDSPEECH: \"who\" },\n//             states: {\n//                 prompt: { entry: say(\"Let's create an appointment\") }\n//             }\n//         },\n//         who: {\n//             initial: \"prompt\",\n//             on: {\n//                 RECOGNISED: [{\n//                     cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n//                     actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n//                     target: \"day\"\n\n//                 },\n//                 { target: \".nomatch\" }]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: say(\"Who are you meeting with?\"),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen()\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Sorry I don't know them\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         day: {\n//             initial: \"prompt\",\n//             on: { \n//                 RECOGNISED: [{\n//                     cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n//                     actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n//                     target: \"wholeday\"   \n\n//                 },\n//                 { target: \".nomatch\"}]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: send((context) => ({\n//                         type: \"SPEAK\",\n//                         value: `OK. ${context.person}. On which day is your meeting?`\n//                     })),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen(),\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Sorry I don't know which day you are talking about\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         wholeday: {\n//                 initial: \"prompt\",\n//                 on: {\n//                     RECOGNISED: [{\n//                         cond: (context) => grammar2[context.recResult] === true,\n//                         target: \"notime\"},\n//                         {\n//                         cond: (context) => grammar2[context.recResult] === false,\n//                         target: \"whattime\"\n\n//                     },\n//                     { target: \".nomatch\"}]\n//                 },\n//                 states: {\n//                     prompt: {\n//                         entry: send((context) => ({\n// \t\t\t                type: \"SPEAK\",\n// \t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n// \t\t\t            })),\n// \t\t\t            on: { ENDSPEECH: \"ask\" }\n//                     },\n//                     ask: {\n//                         entry: listen()\n//                     },\n//                     nomatch: {\n// \t\t\t            entry: say(\"Please repeat it again\"),\n// \t\t                on: { ENDSPEECH: \"prompt\" }\n//                     }\n//                 }\n//             },\n//             notime: {\n//                     initial: \"prompt\",\n//                     on: {\n//                         RECOGNISED: [{ \n//                             cond: (context) => grammar2[context.recResult] === true,\n//                             target: \"Finished\"},\n//                             {\n//                              cond: (context) => grammar2[\"context.recResult\"] === false,\n//                             target: \"who\"\n\n//                         },\n//                         {target: \".nomatch\"}]\n//                     },\n//                     states: {\n//                         prompt: {\n//                             entry: send((context) => ({\n//                                 type: \"SPEAK\",\n// \t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`  \n//                             })),\n//                             on: { ENDSPEECH: \"ask\"}\n//                         },\n//                         ask: {\n//                             entry: listen()\n//                         },\n//                         nomatch: {\n//                             entry: say(\"Please repeat it again\"),\n//                             on: { ENDSPEECH: \"prompt\" }\n//                         }\n//                     }\n//                 },\n//                 whattime: {\n//                     initial: \"prompt\",\n//                     on: {\n//                         RECOGNISED: [{\n// \t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n// \t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n// \t\t\t\t\t\t\ttarget: \"withtime\"\n                    \n//                         },\n//                         { target: \".nomatch\"}]\n//                     },\n//                     states: {\n//                         prompt: { entry: say(\"What time is your meeting\"),\n// \t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n//                     },\n//                     ask: {\n//                         entry: listen()\n\n//                 },\n//                 nomatch: {\n// \t\t\t\t\tentry: say(\"Please repeat it again\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         withtime: {\n//             initial: \"prompt\",\n//             on: {\n//                 RECOGNISED: [{ \n// \t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n// \t\t\t\t\ttarget: \"Finished\"},\n// \t\t\t\t\t{\n// \t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n// \t\t\t\t\ttarget: \"who\"\n\n//                 },\n//                 { target: \".nomatch\" }]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: send((context) => ({\n//                         type: \"SPEAK\",\n//                         value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n//                     })),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen()\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Please repeat it again\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//                 Finished: {\n//                         initial: \"prompt\",\n//                         on: { ENDSPEECH: \"init\" },\n//                         states: {\n//                             prompt: { entry: say(\"Your appointment has been created!\")\n//                            },\n//                         }\n//                     }\n//                 }\n//             }) \n\nlet a = grammar2[\"yes\"]\nlet b = grammar2[\"no\"]\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n        }})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n   \n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")\n        },\n\n\n        query: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: 'menu',\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    \n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n                },\n        nomatch: {\n            entry: say(\"Sorry I don't know that\"),\n        on: { ENDSPEECH: \"prompt\" }\n                }\n                }\n        },\n        confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n    confirm_time: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                target: \"who\"\n            },\n    {cond: (context) => (grammar2[context.recResult] === a),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry, I don't understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-app.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n"]},"metadata":{},"sourceType":"module"}