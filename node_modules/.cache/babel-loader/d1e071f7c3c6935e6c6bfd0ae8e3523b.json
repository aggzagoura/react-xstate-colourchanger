{"ast":null,"code":"import{send,assign}from\"xstate\";//import { isBuiltInEvent } from \"xstate/lib/utils\";\nfunction say(text){return send(_context=>({type:\"SPEAK\",value:text}));}function listen(){return send('LISTEN');}const grammar={\"John\":{person:\"John Appleseed\"},\"Mary\":{person:\"Mary Zagoura\"},\"Nick\":{person:\"Nick Katapodis\"},\"Samantha\":{person:\"Samantha Meyers\"},\"Anna\":{person:\"Anna Heathrow\"},\"James\":{person:\"James Smith\"},\"on Friday\":{day:\"Friday\"},\"on Monday\":{day:\"Monday\"},\"on Tuesday\":{day:\"Tuesday\"},\"on Saturday\":{day:\"Saturday\"},\"at ten\":{time:\"10:00\"},\"at eight\":{time:\"8:00\"},\"at eleven\":{time:\"11:00\"},\"at twelve\":{time:\"12:00\"}};const grammar2={\"yes\":true,\"Yes\":true,\"of course\":true,\"Of course\":true,\"no\":false,\"No\":false,\"no way\":false,\"No way\":false};export const dmMachine={initial:'init',states:{init:{on:{CLICK:'welcome'}},welcome:{initial:\"prompt\",on:{ENDSPEECH:\"who\"},states:{prompt:{entry:say(\"Let's create an appointment\")}}},who:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"person\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{person:grammar[context.recResult].person};}),target:\"day\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"Who are you meeting with?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know them\"),on:{ENDSPEECH:\"prompt\"}}}},day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"day\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{day:grammar[context.recResult].day};}),target:\"wholeday\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.person,\". On which day is your meeting?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know which day you are talking about\"),on:{ENDSPEECH:\"prompt\"}}}},wholeday:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===true,target:\"notime\"},{cond:context=>grammar2[context.recResult]===false,target:\"whattime\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Good.on \".concat(context.day,\". Will it take the whole day?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},notime:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===true,target:\"Finished\"},{cond:context=>grammar2[\"context.recResult\"]===false,target:\"who\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Good. Do you want to me create an appointment with \".concat(context.person,\" on \").concat(context.day,\"for the whole day?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},whattime:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"time\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{time:grammar[context.recResult].time};}),target:\"withtime\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"What time is your meeting\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},withtime:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===true,target:\"Finished\"},{cond:context=>grammar2[context.recResult]===false,target:\"who\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Good. Do you want to me create an appointment with \".concat(context.person,\" on \").concat(context.day,\" at \").concat(context.time,\"?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},Finished:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:say(\"Your appointment has been created!\")}}}}};","map":{"version":3,"sources":["/Users/aggzagoura/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","grammar2","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","wholeday","notime","whattime","withtime","Finished"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n//import { isBuiltInEvent } from \"xstate/lib/utils\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Mary\": { person: \"Mary Zagoura\" },\n    \"Nick\": { person: \"Nick Katapodis\" },\n    \"Samantha\": { person: \"Samantha Meyers\" },\n    \"Anna\": { person: \"Anna Heathrow\" },\n    \"James\": { person: \"James Smith\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at eight\": { time: \"8:00\" },\n    \"at eleven\": { time: \"11:00\" },\n    \"at twelve\": { time: \"12:00\" }\n}\n\nconst grammar2= { \"yes\": true,\n                  \"Yes\": true,\n                  \"of course\": true,\n                  \"Of course\": true,\n                  \"no\": false,\n                  \"No\":false,\n                  \"no way\": false,\n                  \"No way\": false\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"   \n\n                },\n                { target: \".nomatch\"}]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen(),\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know which day you are talking about\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                        cond: (context) => grammar2[context.recResult] === true,\n                        target: \"notime\"},\n                        {\n                        cond: (context) => grammar2[context.recResult] === false,\n                        target: \"whattime\"\n\n                    },\n                    { target: \".nomatch\"}]\n                },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n                    },\n                    ask: {\n                        entry: listen()\n                    },\n                    nomatch: {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n                    }\n                }\n            },\n            notime: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ \n                            cond: (context) => grammar2[context.recResult] === true,\n                            target: \"Finished\"},\n                            {\n                             cond: (context) => grammar2[\"context.recResult\"] === false,\n                            target: \"who\"\n\n                        },\n                        {target: \".nomatch\"}]\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`  \n                            })),\n                            on: { ENDSPEECH: \"ask\"}\n                        },\n                        ask: {\n                            entry: listen()\n                        },\n                        nomatch: {\n                            entry: say(\"Please repeat it again\"),\n                            on: { ENDSPEECH: \"prompt\" }\n                        }\n                    }\n                },\n                whattime: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n\t\t\t\t\t\t\ttarget: \"withtime\"\n                    \n                        },\n                        { target: \".nomatch\"}]\n                    },\n                    states: {\n                        prompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n                    },\n                    ask: {\n                        entry: listen()\n\n                },\n                nomatch: {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        withtime: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\"},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Please repeat it again\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n                Finished: {\n                        initial: \"prompt\",\n                        on: { ENDSPEECH: \"init\" },\n                        states: {\n                            prompt: { entry: say(\"Your appointment has been created!\")\n                           },\n                        }\n                    }\n                }\n            }) "]},"metadata":{},"sourceType":"module"}