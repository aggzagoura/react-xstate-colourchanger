{"ast":null,"code":"import _objectSpread from\"/Users/aggzagoura/Downloads/react-xstate-colourchanger-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{send}from\"xstate\";// SRGS parser and example (logs the results to console on page load)\nimport{loadGrammar}from'./runparser';import{parse}from'./chartparser';import{grammar}from'./grammars/pizzaGrammar';var gram=loadGrammar(grammar);var input=\"I would like a coca cola and three large pizzas with pepperoni and mushrooms\";var prs=parse(input.split(/\\s+/),gram);var result=prs.resultsForRule(gram.$root)[0];console.log(result);var sayColour=send(function(context){return{type:\"SPEAK\",value:\"Repainting to \".concat(context.recResult)};});function say(text){return send(function(_context){return{type:\"SPEAK\",value:text};});}function promptAndAsk(prompt){return{initial:'prompt',states:{prompt:{entry:say(prompt),on:{ENDSPEECH:'ask'}},ask:{entry:send('LISTEN')}}};}export var dmMachine={initial:'init',states:{init:{on:{CLICK:'welcome'}},welcome:_objectSpread({on:{RECOGNISED:[{target:'stop',cond:function cond(context){return context.recResult==='stop';}},{target:'repaint'}]}},promptAndAsk(\"Tell me the colour\")),stop:{entry:say(\"Ok\"),always:'init'},repaint:{initial:'prompt',states:{prompt:{entry:sayColour,on:{ENDSPEECH:'repaint'}},repaint:{entry:'changeColour',always:'#root.dm.welcome'}}}}};","map":{"version":3,"sources":["/Users/aggzagoura/Downloads/react-xstate-colourchanger-master-2/src/dmColourChanger.ts"],"names":["send","loadGrammar","parse","grammar","gram","input","prs","split","result","resultsForRule","$root","console","log","sayColour","context","type","value","recResult","say","text","_context","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","stop","always","repaint"],"mappings":"qLAAA,OAAwBA,IAAxB,KAA4C,QAA5C,CAEA;AACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,KAAT,KAAsB,eAAtB,CACA,OAASC,OAAT,KAAwB,yBAAxB,CAEA,GAAMC,CAAAA,IAAI,CAAGH,WAAW,CAACE,OAAD,CAAxB,CACA,GAAME,CAAAA,KAAK,CAAG,8EAAd,CACA,GAAMC,CAAAA,GAAG,CAAGJ,KAAK,CAACG,KAAK,CAACE,KAAN,CAAY,KAAZ,CAAD,CAAqBH,IAArB,CAAjB,CACA,GAAMI,CAAAA,MAAM,CAAGF,GAAG,CAACG,cAAJ,CAAmBL,IAAI,CAACM,KAAxB,EAA+B,CAA/B,CAAf,CAEAC,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAEA,GAAMK,CAAAA,SAAuC,CAAGb,IAAI,CAAC,SAACc,OAAD,QAA0B,CAC3EC,IAAI,CAAE,OADqE,CAC5DC,KAAK,yBAAmBF,OAAO,CAACG,SAA3B,CADuD,CAA1B,EAAD,CAApD,CAIA,QAASC,CAAAA,GAAT,CAAaC,IAAb,CAAyD,CACrD,MAAOnB,CAAAA,IAAI,CAAC,SAACoB,QAAD,QAA2B,CAAEL,IAAI,CAAE,OAAR,CAAiBC,KAAK,CAAEG,IAAxB,CAA3B,EAAD,CAAX,CACH,CAED,QAASE,CAAAA,YAAT,CAAsBC,MAAtB,CAAgF,CAC5E,MAAQ,CACJC,OAAO,CAAE,QADL,CAEJC,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEP,GAAG,CAACI,MAAD,CADN,CAEJI,EAAE,CAAE,CAAEC,SAAS,CAAE,KAAb,CAFA,CADJ,CAKJC,GAAG,CAAE,CACDH,KAAK,CAAEzB,IAAI,CAAC,QAAD,CADV,CALD,CAFJ,CAAR,CAYH,CAGD,MAAO,IAAM6B,CAAAA,SAAmD,CAAI,CAChEN,OAAO,CAAE,MADuD,CAEhEC,MAAM,CAAE,CACJM,IAAI,CAAE,CACFJ,EAAE,CAAE,CACAK,KAAK,CAAE,SADP,CADF,CADF,CAMJC,OAAO,gBACHN,EAAE,CAAE,CACAO,UAAU,CAAE,CACR,CAAEC,MAAM,CAAE,MAAV,CAAkBC,IAAI,CAAE,cAACrB,OAAD,QAAaA,CAAAA,OAAO,CAACG,SAAR,GAAsB,MAAnC,EAAxB,CADQ,CAER,CAAEiB,MAAM,CAAE,SAAV,CAFQ,CADZ,CADD,EAMAb,YAAY,CAAC,oBAAD,CANZ,CANH,CAcJe,IAAI,CAAE,CACFX,KAAK,CAAEP,GAAG,CAAC,IAAD,CADR,CAEFmB,MAAM,CAAE,MAFN,CAdF,CAkBJC,OAAO,CAAE,CACLf,OAAO,CAAE,QADJ,CAELC,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEZ,SADH,CAEJa,EAAE,CAAE,CAAEC,SAAS,CAAE,SAAb,CAFA,CADJ,CAKJW,OAAO,CAAE,CACLb,KAAK,CAAE,cADF,CAELY,MAAM,CAAE,kBAFH,CALL,CAFH,CAlBL,CAFwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action } from \"xstate\";\n\n// SRGS parser and example (logs the results to console on page load)\nimport { loadGrammar } from './runparser'\nimport { parse } from './chartparser'\nimport { grammar } from './grammars/pizzaGrammar'\n\nconst gram = loadGrammar(grammar)\nconst input = \"I would like a coca cola and three large pizzas with pepperoni and mushrooms\"\nconst prs = parse(input.split(/\\s+/), gram)\nconst result = prs.resultsForRule(gram.$root)[0]\n\nconsole.log(result)\n\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Repainting to ${context.recResult}`\n}))\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n        }\n    })\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            on: {\n                RECOGNISED: [\n                    { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                    { target: 'repaint' }]\n            },\n            ...promptAndAsk(\"Tell me the colour\")\n        },\n        stop: {\n            entry: say(\"Ok\"),\n            always: 'init'\n        },\n        repaint: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: sayColour,\n                    on: { ENDSPEECH: 'repaint' }\n                },\n                repaint: {\n                    entry: 'changeColour',\n                    always: '#root.dm.welcome'\n                }\n            }\n        }\n    }\n})\n"]},"metadata":{},"sourceType":"module"}