{"ast":null,"code":"import _objectSpread from \"/Users/aggzagoura/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send } from \"xstate\";\nconst sayColour = send(context => ({\n  type: \"SPEAK\",\n  value: \"Repainting to \".concat(context.recResult)\n}));\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      on: {\n        RECOGNISED: [{\n          target: 'stop',\n          cond: context => context.recResult === 'stop'\n        }, {\n          target: 'repaint'\n        }]\n      }\n    }, promptAndAsk(\"Tell me the colour\")),\n    stop: {\n      entry: say(\"Ok\"),\n      always: 'init'\n    },\n    repaint: {\n      initial: 'prompt',\n      states: {\n        prompt: {\n          entry: sayColour,\n          on: {\n            ENDSPEECH: 'repaint'\n          }\n        },\n        repaint: {\n          entry: 'changeColour',\n          always: '#root.dm.welcome'\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/aggzagoura/react-xstate-colourchanger/src/dmColourChanger.ts"],"names":["send","sayColour","context","type","value","recResult","say","text","_context","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","stop","always","repaint"],"mappings":";AAAA,SAAwBA,IAAxB,QAA4C,QAA5C;AAGA,MAAMC,SAAuC,GAAGD,IAAI,CAAEE,OAAD,KAA0B;AAC3EC,EAAAA,IAAI,EAAE,OADqE;AAC5DC,EAAAA,KAAK,0BAAmBF,OAAO,CAACG,SAA3B;AADuD,CAA1B,CAAD,CAApD;;AAIA,SAASC,GAAT,CAAaC,IAAb,EAAyD;AACrD,SAAOP,IAAI,CAAEQ,QAAD,KAA2B;AAAEL,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEG;AAAxB,GAA3B,CAAD,CAAX;AACH;;AAED,SAASE,YAAT,CAAsBC,MAAtB,EAAgF;AAC5E,SAAQ;AACXC,IAAAA,OAAO,EAAE,QADE;AAEXC,IAAAA,MAAM,EAAE;AACGF,MAAAA,MAAM,EAAE;AAClBG,QAAAA,KAAK,EAAEP,GAAG,CAACI,MAAD,CADQ;AAElBI,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAFc,OADX;AAKGC,MAAAA,GAAG,EAAE;AACfH,QAAAA,KAAK,EAAEb,IAAI,CAAC,QAAD;AADI;AALR;AAFG,GAAR;AAWH;;AAGD,OAAO,MAAMiB,SAAmD,GAAI;AAChEN,EAAAA,OAAO,EAAE,MADuD;AAEhEC,EAAAA,MAAM,EAAE;AACJM,IAAAA,IAAI,EAAE;AACFJ,MAAAA,EAAE,EAAE;AACAK,QAAAA,KAAK,EAAE;AADP;AADF,KADF;AAMJC,IAAAA,OAAO;AACHN,MAAAA,EAAE,EAAE;AACAO,QAAAA,UAAU,EAAE,CACR;AAAEC,UAAAA,MAAM,EAAE,MAAV;AAAkBC,UAAAA,IAAI,EAAGrB,OAAD,IAAaA,OAAO,CAACG,SAAR,KAAsB;AAA3D,SADQ,EAER;AAAEiB,UAAAA,MAAM,EAAE;AAAV,SAFQ;AADZ;AADD,OAMPb,YAAY,CAAC,oBAAD,CANL,CANH;AAcJe,IAAAA,IAAI,EAAE;AACFX,MAAAA,KAAK,EAAEP,GAAG,CAAC,IAAD,CADR;AAEFmB,MAAAA,MAAM,EAAE;AAFN,KAdF;AAkBJC,IAAAA,OAAO,EAAE;AACLf,MAAAA,OAAO,EAAE,QADJ;AAELC,MAAAA,MAAM,EAAE;AACJF,QAAAA,MAAM,EAAE;AACJG,UAAAA,KAAK,EAAEZ,SADH;AAEJa,UAAAA,EAAE,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb;AAFA,SADJ;AAKJW,QAAAA,OAAO,EAAE;AACLb,UAAAA,KAAK,EAAE,cADF;AAELY,UAAAA,MAAM,EAAE;AAFH;AALL;AAFH;AAlBL;AAFwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action } from \"xstate\";\n\n\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Repainting to ${context.recResult}`\n}))\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\tinitial: 'prompt',\n\tstates: {\n            prompt: {\n\t\tentry: say(prompt),\n\t\ton: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n\t\tentry: send('LISTEN'),\n            },\n\t}})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            on: {\n                RECOGNISED: [\n                    { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                    { target: 'repaint' }]\n            },\n\t    ...promptAndAsk(\"Tell me the colour\")\n        },\n        stop: {\n            entry: say(\"Ok\"),\n            always: 'init'\n        },\n        repaint: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: sayColour,\n                    on: { ENDSPEECH: 'repaint' }\n                },\n                repaint: {\n                    entry: 'changeColour',\n                    always: '#root.dm.welcome'\n                }\n            }\n        }\n    }\n})\n"]},"metadata":{},"sourceType":"module"}