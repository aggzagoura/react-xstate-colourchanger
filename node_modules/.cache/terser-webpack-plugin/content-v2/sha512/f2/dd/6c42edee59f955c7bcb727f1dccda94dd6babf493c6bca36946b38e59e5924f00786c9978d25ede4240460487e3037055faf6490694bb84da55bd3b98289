{"code":"(this[\"webpackJsonpxstate-react-typescript-template\"]=this[\"webpackJsonpxstate-react-typescript-template\"]||[]).push([[0],{24:function(t,e,n){},35:function(t,e,n){\"use strict\";n.r(e);var o=n(23),a=n(10),r=(n(24),n(7),n(20)),s=n(41),i=n(4),c=n(40),p=n(39);let m=grammar2.yes,l=grammar2.no;const d={initial:\"init\",states:{init:{on:{CLICK:\"welcome\"}},welcome:Object(a.a)({on:{RECOGNISED:{target:\"query\",actions:assign((t=>({option:t.recResult})))}}},(E=\"What would you like to do? Your options are appointment, to do item or timer\",{initial:\"prompt\",states:{prompt:{entry:say(E),on:{ENDSPEECH:\"ask\"}},ask:{entry:send(\"LISTEN\")}}})),query:{invoke:{id:\"rasa\",src:(t,e)=>y(t.option),onDone:{target:\"menu\",actions:[assign(((t,e)=>({option:e.data.intent.name}))),(t,e)=>console.log(e.data)]},onError:{target:\"welcome\",actions:(t,e)=>console.log(e.data)}}},menu:{initial:\"prompt\",on:{ENDSPEECH:[{target:\"todo\",cond:t=>\"todo\"===t.option},{target:\"timer\",cond:t=>\"timer\"===t.option},{target:\"appointment\",cond:t=>\"appointment\"===t.option}]},states:{prompt:{entry:send((t=>({type:\"SPEAK\",value:\"OK. I understand.\"})))}}},todo:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send((t=>({type:\"SPEAK\",value:\"Let's create a to do item\"})))}}},timer:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send((t=>({type:\"SPEAK\",value:\"Let's create a timer\"})))}}},appointment:{initial:\"prompt\",on:{ENDSPEECH:\"who\"},states:{prompt:{entry:send((t=>({type:\"SPEAK\",value:\"Let's create an appointment\"})))}}},who:{initial:\"prompt\",on:{RECOGNISED:[{cond:t=>\"person\"in(grammar[t.recResult]||{}),actions:assign((t=>({person:grammar[t.recResult].person}))),target:\"day\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"Who are you meeting with?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know them\"),on:{ENDSPEECH:\"prompt\"}}}},day:{initial:\"prompt\",on:{RECOGNISED:[{cond:t=>\"day\"in(grammar[t.recResult]||{}),actions:assign((t=>({day:grammar[t.recResult].day}))),target:\"wholeday\"},{target:\".nomatch\"}]},states:{prompt:{entry:send((t=>({type:\"SPEAK\",value:\"OK. \".concat(t.person,\". On which day is your meeting?\")}))),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I didn't understand\"),on:{ENDSPEECH:\"prompt\"}}}},wholeday:{initial:\"prompt\",on:{RECOGNISED:[{cond:t=>grammar2[t.recResult]===l,target:\"time\"},{cond:t=>grammar2[t.recResult]===m,target:\"confirm_meeting_whole_day\"},{target:\".nomatch\"}]},states:{prompt:{entry:send((t=>({type:\"SPEAK\",value:\"OK. \".concat(t.person,\" on \").concat(t.day,\". Will it take the whole day?\")}))),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand\"),on:{ENDSPEECH:\"prompt\"}}}},time:{initial:\"prompt\",on:{RECOGNISED:[{cond:t=>\"time\"in(grammar[t.recResult]||{}),actions:assign((t=>({time:grammar[t.recResult].time}))),target:\"confirm_time\"},{target:\".nomatch\"}]},states:{prompt:{entry:send((t=>({type:\"SPEAK\",value:\"OK. \".concat(t.day,\". What time is your meeting?\")}))),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know that\"),on:{ENDSPEECH:\"prompt\"}}}},confirm_meeting_whole_day:{initial:\"prompt\",on:{RECOGNISED:[{cond:t=>grammar2[t.recResult]===l,target:\"init\"},{cond:t=>grammar2[t.recResult]===m,target:\"confirmed\"},{target:\".nomatch\"}]},states:{prompt:{entry:send((t=>({type:\"SPEAK\",value:\"Do you want to create an appointment with \".concat(t.person,\" on \").concat(t.day,\" for the whole day?\")}))),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand\"),on:{ENDSPEECH:\"prompt\"}}}},confirm_time:{initial:\"prompt\",on:{RECOGNISED:[{cond:t=>grammar2[t.recResult]===l,target:\"who\"},{cond:t=>grammar2[t.recResult]===m,target:\"confirmed\"},{target:\".nomatch\"}]},states:{prompt:{entry:send((t=>({type:\"SPEAK\",value:\"Do you want to create an appointment with \".concat(t.person,\" on \").concat(t.day,\" at \").concat(t.time,\"?\")}))),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand\"),on:{ENDSPEECH:\"prompt\"}}}},confirmed:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send((t=>({type:\"SPEAK\",value:\"Your appointment has been created!\"})))}}}}};var E;const y=t=>fetch(new Request(\"https://cors-anywhere.herokuapp.com/https://rasa-nlu-app.herokuapp.com/model/parse\",{method:\"POST\",headers:{Origin:\"http://localhost:3000/react-xstate-colourchanger\"},body:'{\"text\": \"'.concat(t,'\"}')})).then((t=>t.json()));var g=n(19),u=n(12);Object(p.a)({url:\"https://statecharts.io/inspect\",iframe:!1});const h=Object(s.a)({id:\"root\",type:\"parallel\",states:{dm:Object(a.a)({},d),asrtts:{initial:\"idle\",states:{idle:{on:{LISTEN:\"recognising\",SPEAK:{target:\"speaking\",actions:Object(i.b)(((t,e)=>({ttsAgenda:e.value})))}}},recognising:{initial:\"progress\",entry:\"recStart\",exit:\"recStop\",on:{ASRRESULT:{actions:[\"recLogResult\",Object(i.b)(((t,e)=>({recResult:e.value})))],target:\".match\"},RECOGNISED:\"idle\"},states:{progress:{},match:{entry:Object(i.k)(\"RECOGNISED\")}}},speaking:{entry:\"ttsStart\",on:{ENDSPEECH:\"idle\"}}}}}},{actions:{recLogResult:t=>{console.log(\"<< ASR: \"+t.recResult)},test:()=>{console.log(\"test\")},logIntent:t=>{console.log(\"<< NLU intent: \"+t.nluData.intent.name)}}}),S=t=>{switch(!0){case t.state.matches({asrtts:\"recognising\"}):return Object(u.jsx)(\"button\",Object(a.a)(Object(a.a)({type:\"button\",className:\"glow-on-hover\",style:{animation:\"glowing 20s linear\"}},t),{},{children:\"Listening...\"}));case t.state.matches({asrtts:\"speaking\"}):return Object(u.jsx)(\"button\",Object(a.a)(Object(a.a)({type:\"button\",className:\"glow-on-hover\",style:{animation:\"bordering 1s infinite\"}},t),{},{children:\"Speaking...\"}));default:return Object(u.jsx)(\"button\",Object(a.a)(Object(a.a)({type:\"button\",className:\"glow-on-hover\"},t),{},{children:\"Click to start\"}))}};function O(){const t=Object(g.useSpeechSynthesis)({onEnd:()=>{l(\"ENDSPEECH\")}}),e=t.speak,n=t.cancel,a=(t.speaking,Object(g.useSpeechRecognition)({onResult:t=>{l({type:\"ASRRESULT\",value:t})}})),r=a.listen,s=(a.listening,a.stop),i=Object(c.b)(h,{devTools:!0,actions:{recStart:Object(c.a)((()=>{console.log(\"Ready to receive a color command.\"),r({interimResults:!1,continuous:!0})})),recStop:Object(c.a)((()=>{console.log(\"Recognition stopped.\"),s()})),changeColour:Object(c.a)((t=>{console.log(\"Repainting...\"),document.body.style.background=t.recResult})),ttsStart:Object(c.a)(((t,n)=>{console.log(\"Speaking...\"),e({text:t.ttsAgenda})})),ttsCancel:Object(c.a)(((t,e)=>{console.log(\"TTS STOP...\"),n()}))}}),p=Object(o.a)(i,3),m=p[0],l=p[1];p[2];return Object(u.jsx)(\"div\",{className:\"App\",children:Object(u.jsx)(S,{state:m,onClick:()=>l(\"CLICK\")})})}const b=document.getElementById(\"root\");r.render(Object(u.jsx)(O,{}),b)}},[[35,1,2]]]);","name":"static/js/main.d6cea965.chunk.js","map":{"version":3,"sources":["static/js/main.d6cea965.chunk.js"],"names":["this","push","24","module","exports","__webpack_require__","35","__webpack_exports__","r","slicedToArray","objectSpread2","react_dom","Machine","actions","useMachine","browser","a","grammar2","b","dmMachine","initial","states","init","on","CLICK","welcome","Object","RECOGNISED","target","assign","context","option","recResult","prompt","entry","say","ENDSPEECH","ask","send","query","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","type","value","todo","timer","appointment","who","grammar","person","listen","nomatch","day","concat","wholeday","time","confirm_meeting_whole_day","confirm_time","confirmed","text","fetch","Request","proxyurl","method","headers","Origin","body","then","json","dist","jsx_runtime","url","iframe","machine","dm","asrtts","idle","LISTEN","SPEAK","_context","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","children","App","_useSpeechSynthesis","onEnd","speak","cancel","_useSpeechRecognition","onResult","result","stop","listening","_useMachine","devTools","recStart","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","_useMachine2","current","onClick","rootElement","getElementById"],"mappings":"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"},"input":"(this[\"webpackJsonpxstate-react-typescript-template\"] = this[\"webpackJsonpxstate-react-typescript-template\"] || []).push([[0],{\n\n/***/ 24:\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n\n/***/ 35:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 5 modules\nvar slicedToArray = __webpack_require__(23);\n\n// EXTERNAL MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js + 1 modules\nvar objectSpread2 = __webpack_require__(10);\n\n// EXTERNAL MODULE: ./src/styles.scss\nvar styles = __webpack_require__(24);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7);\n\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(20);\n\n// EXTERNAL MODULE: ./node_modules/xstate/es/Machine.js + 2 modules\nvar Machine = __webpack_require__(41);\n\n// EXTERNAL MODULE: ./node_modules/xstate/es/actions.js\nvar actions = __webpack_require__(4);\n\n// EXTERNAL MODULE: ./node_modules/@xstate/react/es/useMachine.js + 3 modules\nvar useMachine = __webpack_require__(40);\n\n// EXTERNAL MODULE: ./node_modules/@xstate/inspect/es/browser.js + 3 modules\nvar browser = __webpack_require__(39);\n\n// CONCATENATED MODULE: ./src/dmAppointment.ts\n// import { MachineConfig, send, Action, assign } from \"xstate\";\n// import { isBuiltInEvent } from \"xstate/lib/utils\";\n// function say(text: string): Action<SDSContext, SDSEvent> {\n//     return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n// }\n// function listen(): Action<SDSContext, SDSEvent> {\n//     return send('LISTEN')\n// }\n// const grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n//     \"John\": { person: \"John Appleseed\" },\n//     \"Mary\": { person: \"Mary Zagoura\" },\n//     \"Nick\": { person: \"Nick Katapodis\" },\n//     \"Samantha\": { person: \"Samantha Meyers\" },\n//     \"Anna\": { person: \"Anna Heathrow\" },\n//     \"James\": { person: \"James Smith\" },\n//     \"on Friday\": { day: \"Friday\" },\n//     \"on Monday\": { day: \"Monday\" },\n//     \"on Tuesday\": { day: \"Tuesday\" },\n//     \"on Saturday\": { day: \"Saturday\" },\n//     \"at ten\": { time: \"10:00\" },\n//     \"at 10\": { time: \"10:00\" },\n//     \"at eight\": { time: \"8:00\" },\n//     \"at 8\": { time: \"8:00\"},\n//     \"at eleven\": { time: \"11:00\" },\n//     \"at 11\": { time: \"11:00\" },\n//     \"at twelve\": { time: \"12:00\" },\n//     \"at 12\": { time: \"12:00\" }\n// }\n// const grammar2= { \"yes\": true,\n//                   \"Yes\": true,\n//                   \"of course\": true,\n//                   \"Of course\": true,\n//                   \"no\": false,\n//                   \"No\":false,\n//                   \"no way\": false,\n//                   \"No way\": false\n// }\n// export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n//     initial: 'init',\n//     states: {\n//         init: {\n//             on: {\n//                 CLICK: 'welcome'\n//             }\n//         },\n//         welcome: {\n//             initial: \"prompt\",\n//             on: { ENDSPEECH: \"who\" },\n//             states: {\n//                 prompt: { entry: say(\"Let's create an appointment\") }\n//             }\n//         },\n//         who: {\n//             initial: \"prompt\",\n//             on: {\n//                 RECOGNISED: [{\n//                     cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n//                     actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n//                     target: \"day\"\n//                 },\n//                 { target: \".nomatch\" }]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: say(\"Who are you meeting with?\"),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen()\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Sorry I don't know them\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         day: {\n//             initial: \"prompt\",\n//             on: { \n//                 RECOGNISED: [{\n//                     cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n//                     actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n//                     target: \"wholeday\"   \n//                 },\n//                 { target: \".nomatch\"}]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: send((context) => ({\n//                         type: \"SPEAK\",\n//                         value: `OK. ${context.person}. On which day is your meeting?`\n//                     })),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen(),\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Sorry I don't know which day you are talking about\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         wholeday: {\n//                 initial: \"prompt\",\n//                 on: {\n//                     RECOGNISED: [{\n//                         cond: (context) => grammar2[context.recResult] === true,\n//                         target: \"notime\"},\n//                         {\n//                         cond: (context) => grammar2[context.recResult] === false,\n//                         target: \"whattime\"\n//                     },\n//                     { target: \".nomatch\"}]\n//                 },\n//                 states: {\n//                     prompt: {\n//                         entry: send((context) => ({\n// \t\t\t                type: \"SPEAK\",\n// \t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n// \t\t\t            })),\n// \t\t\t            on: { ENDSPEECH: \"ask\" }\n//                     },\n//                     ask: {\n//                         entry: listen()\n//                     },\n//                     nomatch: {\n// \t\t\t            entry: say(\"Please repeat it again\"),\n// \t\t                on: { ENDSPEECH: \"prompt\" }\n//                     }\n//                 }\n//             },\n//             notime: {\n//                     initial: \"prompt\",\n//                     on: {\n//                         RECOGNISED: [{ \n//                             cond: (context) => grammar2[context.recResult] === true,\n//                             target: \"Finished\"},\n//                             {\n//                              cond: (context) => grammar2[\"context.recResult\"] === false,\n//                             target: \"who\"\n//                         },\n//                         {target: \".nomatch\"}]\n//                     },\n//                     states: {\n//                         prompt: {\n//                             entry: send((context) => ({\n//                                 type: \"SPEAK\",\n// \t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`  \n//                             })),\n//                             on: { ENDSPEECH: \"ask\"}\n//                         },\n//                         ask: {\n//                             entry: listen()\n//                         },\n//                         nomatch: {\n//                             entry: say(\"Please repeat it again\"),\n//                             on: { ENDSPEECH: \"prompt\" }\n//                         }\n//                     }\n//                 },\n//                 whattime: {\n//                     initial: \"prompt\",\n//                     on: {\n//                         RECOGNISED: [{\n// \t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n// \t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n// \t\t\t\t\t\t\ttarget: \"withtime\"\n//                         },\n//                         { target: \".nomatch\"}]\n//                     },\n//                     states: {\n//                         prompt: { entry: say(\"What time is your meeting\"),\n// \t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n//                     },\n//                     ask: {\n//                         entry: listen()\n//                 },\n//                 nomatch: {\n// \t\t\t\t\tentry: say(\"Please repeat it again\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         withtime: {\n//             initial: \"prompt\",\n//             on: {\n//                 RECOGNISED: [{ \n// \t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n// \t\t\t\t\ttarget: \"Finished\"},\n// \t\t\t\t\t{\n// \t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n// \t\t\t\t\ttarget: \"who\"\n//                 },\n//                 { target: \".nomatch\" }]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: send((context) => ({\n//                         type: \"SPEAK\",\n//                         value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n//                     })),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen()\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Please repeat it again\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//                 Finished: {\n//                         initial: \"prompt\",\n//                         on: { ENDSPEECH: \"init\" },\n//                         states: {\n//                             prompt: { entry: say(\"Your appointment has been created!\")\n//                            },\n//                         }\n//                     }\n//                 }\n//             }) \nlet a=grammar2[\"yes\"];let b=grammar2[\"no\"];function promptAndAsk(prompt){return{initial:'prompt',states:{prompt:{entry:say(prompt),on:{ENDSPEECH:'ask'}},ask:{entry:send('LISTEN')}}};}const dmMachine={initial:'init',states:{init:{on:{CLICK:'welcome'}},welcome:Object(objectSpread2[\"a\" /* default */])({on:{RECOGNISED:{target:\"query\",actions:assign(context=>{return{option:context.recResult};})}}},promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")),query:{invoke:{id:'rasa',src:(context,event)=>nluRequest(context.option),onDone:{target:'menu',actions:[assign((context,event)=>{return{option:event.data.intent.name};}),(context,event)=>console.log(event.data)]//actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n},onError:{target:'welcome',actions:(context,event)=>console.log(event.data)}}},menu:{initial:\"prompt\",on:{ENDSPEECH:[{target:'todo',cond:context=>context.option==='todo'},{target:'timer',cond:context=>context.option==='timer'},{target:'appointment',cond:context=>context.option==='appointment'}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. I understand.\"}))}/*            nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */}},todo:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create a to do item\"}))}}},timer:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create a timer\"}))}}},appointment:{initial:\"prompt\",on:{ENDSPEECH:\"who\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create an appointment\"}))}}},who:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"person\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{person:grammar[context.recResult].person};}),target:\"day\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"Who are you meeting with?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know them\"),on:{ENDSPEECH:\"prompt\"}}}},day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"day\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{day:grammar[context.recResult].day};}),target:\"wholeday\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.person,\". On which day is your meeting?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I didn't understand\"),on:{ENDSPEECH:\"prompt\"}}}},wholeday:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===b,target:\"time\"},{cond:context=>grammar2[context.recResult]===a,target:\"confirm_meeting_whole_day\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.person,\" on \").concat(context.day,\". Will it take the whole day?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand\"),on:{ENDSPEECH:\"prompt\"}}}},time:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"time\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{time:grammar[context.recResult].time};}),target:\"confirm_time\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.day,\". What time is your meeting?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know that\"),on:{ENDSPEECH:\"prompt\"}}}},confirm_meeting_whole_day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===b,target:\"init\"},{cond:context=>grammar2[context.recResult]===a,target:\"confirmed\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" for the whole day?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand\"),on:{ENDSPEECH:\"prompt\"}}}},confirm_time:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===b,target:\"who\"},{cond:context=>grammar2[context.recResult]===a,target:\"confirmed\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" at \").concat(context.time,\"?\")})),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand\"),on:{ENDSPEECH:\"prompt\"}}}},confirmed:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Your appointment has been created!\"}))}}}}};/* RASA API\n *  */const proxyurl=\"https://cors-anywhere.herokuapp.com/\";const rasaurl='https://rasa-nlu-app.herokuapp.com/model/parse';const nluRequest=text=>fetch(new Request(proxyurl+rasaurl,{method:'POST',headers:{'Origin':'http://localhost:3000/react-xstate-colourchanger'},// only required with proxy\nbody:\"{\\\"text\\\": \\\"\".concat(text,\"\\\"}\")})).then(data=>data.json());\n// EXTERNAL MODULE: ./node_modules/react-speech-kit/dist/index.js\nvar dist = __webpack_require__(19);\n\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(12);\n\n// CONCATENATED MODULE: ./src/index.tsx\nObject(browser[\"a\" /* inspect */])({url:\"https://statecharts.io/inspect\",iframe:false});const machine=Object(Machine[\"a\" /* Machine */])({id:'root',type:'parallel',states:{dm:Object(objectSpread2[\"a\" /* default */])({},dmMachine),asrtts:{initial:'idle',states:{idle:{on:{LISTEN:'recognising',SPEAK:{target:'speaking',actions:Object(actions[\"b\" /* assign */])((_context,event)=>{return{ttsAgenda:event.value};})}}},recognising:{initial:'progress',entry:'recStart',exit:'recStop',on:{ASRRESULT:{actions:['recLogResult',Object(actions[\"b\" /* assign */])((_context,event)=>{return{recResult:event.value};})],target:'.match'},RECOGNISED:'idle'},states:{progress:{},match:{entry:Object(actions[\"k\" /* send */])('RECOGNISED')}}},speaking:{entry:'ttsStart',on:{ENDSPEECH:'idle'}}}}}},{actions:{recLogResult:context=>{/* context.recResult = event.recResult; */console.log('<< ASR: '+context.recResult);},test:()=>{console.log('test');},logIntent:context=>{/* context.nluData = event.data */console.log('<< NLU intent: '+context.nluData.intent.name);}}});const ReactiveButton=props=>{switch(true){case props.state.matches({asrtts:'recognising'}):return/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"button\",Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({type:\"button\",className:\"glow-on-hover\",style:{animation:\"glowing 20s linear\"}},props),{},{children:\"Listening...\"}));case props.state.matches({asrtts:'speaking'}):return/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"button\",Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({type:\"button\",className:\"glow-on-hover\",style:{animation:\"bordering 1s infinite\"}},props),{},{children:\"Speaking...\"}));default:return/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"button\",Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({type:\"button\",className:\"glow-on-hover\"},props),{},{children:\"Click to start\"}));}};function App(){const _useSpeechSynthesis=Object(dist[\"useSpeechSynthesis\"])({onEnd:()=>{send('ENDSPEECH');}}),speak=_useSpeechSynthesis.speak,cancel=_useSpeechSynthesis.cancel,speaking=_useSpeechSynthesis.speaking;const _useSpeechRecognition=Object(dist[\"useSpeechRecognition\"])({onResult:result=>{send({type:\"ASRRESULT\",value:result});}}),listen=_useSpeechRecognition.listen,listening=_useSpeechRecognition.listening,stop=_useSpeechRecognition.stop;const _useMachine=Object(useMachine[\"b\" /* useMachine */])(machine,{devTools:true,actions:{recStart:Object(useMachine[\"a\" /* asEffect */])(()=>{console.log('Ready to receive a color command.');listen({interimResults:false,continuous:true});}),recStop:Object(useMachine[\"a\" /* asEffect */])(()=>{console.log('Recognition stopped.');stop();}),changeColour:Object(useMachine[\"a\" /* asEffect */])(context=>{console.log('Repainting...');document.body.style.background=context.recResult;}),ttsStart:Object(useMachine[\"a\" /* asEffect */])((context,effect)=>{console.log('Speaking...');speak({text:context.ttsAgenda});}),ttsCancel:Object(useMachine[\"a\" /* asEffect */])((context,effect)=>{console.log('TTS STOP...');cancel();})/* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */}}),_useMachine2=Object(slicedToArray[\"a\" /* default */])(_useMachine,3),current=_useMachine2[0],send=_useMachine2[1],service=_useMachine2[2];return/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"div\",{className:\"App\",children:/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(ReactiveButton,{state:current,onClick:()=>send('CLICK')})});};/* RASA API\n *  */const src_proxyurl=\"https://cors-anywhere.herokuapp.com/\";const src_rasaurl='https://rasa-nlu-app.herokuapp.com/model/parse';const src_nluRequest=text=>fetch(new Request(src_proxyurl+src_rasaurl,{method:'POST',headers:{'Origin':'http://maraev.me'},// only required with proxy\nbody:\"{\\\"text\\\": \\\"\".concat(text,\"\\\"}\")})).then(data=>data.json());const rootElement=document.getElementById(\"root\");react_dom[\"render\"](/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(App,{}),rootElement);\n\n/***/ })\n\n},[[35,1,2]]]);","inputSourceMap":{"version":3,"sources":["/Users/aggzagoura/react-xstate-colourchanger/node_modules/mini-css-extract-plugin/dist/loader.js??ref--5-oneOf-6-0!/Users/aggzagoura/react-xstate-colourchanger/node_modules/css-loader/dist/cjs.js??ref--5-oneOf-6-1!/Users/aggzagoura/react-xstate-colourchanger/node_modules/postcss-loader/src/index.js??postcss!/Users/aggzagoura/react-xstate-colourchanger/node_modules/resolve-url-loader/index.js??ref--5-oneOf-6-3!/Users/aggzagoura/react-xstate-colourchanger/node_modules/sass-loader/dist/cjs.js??ref--5-oneOf-6-4!/Users/aggzagoura/react-xstate-colourchanger/src/styles.scss","/Users/aggzagoura/react-xstate-colourchanger/src/dmAppointment.ts","/Users/aggzagoura/react-xstate-colourchanger/src/index.tsx"],"names":["a","grammar2","b","promptAndAsk","prompt","initial","states","entry","say","on","ENDSPEECH","ask","send","dmMachine","init","CLICK","welcome","RECOGNISED","target","actions","assign","context","option","recResult","query","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","type","value","todo","timer","appointment","who","grammar","person","listen","nomatch","day","wholeday","time","confirm_meeting_whole_day","confirm_time","confirmed","proxyurl","rasaurl","text","fetch","Request","method","headers","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","_context","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","listening","stop","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","style","background","ttsStart","effect","ttsCancel","current","service","rootElement","getElementById","ReactDOM"],"mappings":";;;;;AAAA,uC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAIA,EAAC,CAAGC,QAAQ,CAAC,KA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","file":"x","sourcesContent":["// extracted by mini-css-extract-plugin","// import { MachineConfig, send, Action, assign } from \"xstate\";\n// import { isBuiltInEvent } from \"xstate/lib/utils\";\n\n\n// function say(text: string): Action<SDSContext, SDSEvent> {\n//     return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n// }\n\n// function listen(): Action<SDSContext, SDSEvent> {\n//     return send('LISTEN')\n// }\n\n// const grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n//     \"John\": { person: \"John Appleseed\" },\n//     \"Mary\": { person: \"Mary Zagoura\" },\n//     \"Nick\": { person: \"Nick Katapodis\" },\n//     \"Samantha\": { person: \"Samantha Meyers\" },\n//     \"Anna\": { person: \"Anna Heathrow\" },\n//     \"James\": { person: \"James Smith\" },\n//     \"on Friday\": { day: \"Friday\" },\n//     \"on Monday\": { day: \"Monday\" },\n//     \"on Tuesday\": { day: \"Tuesday\" },\n//     \"on Saturday\": { day: \"Saturday\" },\n//     \"at ten\": { time: \"10:00\" },\n//     \"at 10\": { time: \"10:00\" },\n//     \"at eight\": { time: \"8:00\" },\n//     \"at 8\": { time: \"8:00\"},\n//     \"at eleven\": { time: \"11:00\" },\n//     \"at 11\": { time: \"11:00\" },\n//     \"at twelve\": { time: \"12:00\" },\n//     \"at 12\": { time: \"12:00\" }\n// }\n\n// const grammar2= { \"yes\": true,\n//                   \"Yes\": true,\n//                   \"of course\": true,\n//                   \"Of course\": true,\n//                   \"no\": false,\n//                   \"No\":false,\n//                   \"no way\": false,\n//                   \"No way\": false\n// }\n\n\n// export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n//     initial: 'init',\n//     states: {\n//         init: {\n//             on: {\n//                 CLICK: 'welcome'\n//             }\n//         },\n//         welcome: {\n//             initial: \"prompt\",\n//             on: { ENDSPEECH: \"who\" },\n//             states: {\n//                 prompt: { entry: say(\"Let's create an appointment\") }\n//             }\n//         },\n//         who: {\n//             initial: \"prompt\",\n//             on: {\n//                 RECOGNISED: [{\n//                     cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n//                     actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n//                     target: \"day\"\n\n//                 },\n//                 { target: \".nomatch\" }]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: say(\"Who are you meeting with?\"),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen()\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Sorry I don't know them\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         day: {\n//             initial: \"prompt\",\n//             on: { \n//                 RECOGNISED: [{\n//                     cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n//                     actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n//                     target: \"wholeday\"   \n\n//                 },\n//                 { target: \".nomatch\"}]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: send((context) => ({\n//                         type: \"SPEAK\",\n//                         value: `OK. ${context.person}. On which day is your meeting?`\n//                     })),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen(),\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Sorry I don't know which day you are talking about\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         wholeday: {\n//                 initial: \"prompt\",\n//                 on: {\n//                     RECOGNISED: [{\n//                         cond: (context) => grammar2[context.recResult] === true,\n//                         target: \"notime\"},\n//                         {\n//                         cond: (context) => grammar2[context.recResult] === false,\n//                         target: \"whattime\"\n\n//                     },\n//                     { target: \".nomatch\"}]\n//                 },\n//                 states: {\n//                     prompt: {\n//                         entry: send((context) => ({\n// \t\t\t                type: \"SPEAK\",\n// \t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n// \t\t\t            })),\n// \t\t\t            on: { ENDSPEECH: \"ask\" }\n//                     },\n//                     ask: {\n//                         entry: listen()\n//                     },\n//                     nomatch: {\n// \t\t\t            entry: say(\"Please repeat it again\"),\n// \t\t                on: { ENDSPEECH: \"prompt\" }\n//                     }\n//                 }\n//             },\n//             notime: {\n//                     initial: \"prompt\",\n//                     on: {\n//                         RECOGNISED: [{ \n//                             cond: (context) => grammar2[context.recResult] === true,\n//                             target: \"Finished\"},\n//                             {\n//                              cond: (context) => grammar2[\"context.recResult\"] === false,\n//                             target: \"who\"\n\n//                         },\n//                         {target: \".nomatch\"}]\n//                     },\n//                     states: {\n//                         prompt: {\n//                             entry: send((context) => ({\n//                                 type: \"SPEAK\",\n// \t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`  \n//                             })),\n//                             on: { ENDSPEECH: \"ask\"}\n//                         },\n//                         ask: {\n//                             entry: listen()\n//                         },\n//                         nomatch: {\n//                             entry: say(\"Please repeat it again\"),\n//                             on: { ENDSPEECH: \"prompt\" }\n//                         }\n//                     }\n//                 },\n//                 whattime: {\n//                     initial: \"prompt\",\n//                     on: {\n//                         RECOGNISED: [{\n// \t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n// \t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n// \t\t\t\t\t\t\ttarget: \"withtime\"\n                    \n//                         },\n//                         { target: \".nomatch\"}]\n//                     },\n//                     states: {\n//                         prompt: { entry: say(\"What time is your meeting\"),\n// \t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n//                     },\n//                     ask: {\n//                         entry: listen()\n\n//                 },\n//                 nomatch: {\n// \t\t\t\t\tentry: say(\"Please repeat it again\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         withtime: {\n//             initial: \"prompt\",\n//             on: {\n//                 RECOGNISED: [{ \n// \t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n// \t\t\t\t\ttarget: \"Finished\"},\n// \t\t\t\t\t{\n// \t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n// \t\t\t\t\ttarget: \"who\"\n\n//                 },\n//                 { target: \".nomatch\" }]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: send((context) => ({\n//                         type: \"SPEAK\",\n//                         value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n//                     })),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen()\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Please repeat it again\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//                 Finished: {\n//                         initial: \"prompt\",\n//                         on: { ENDSPEECH: \"init\" },\n//                         states: {\n//                             prompt: { entry: say(\"Your appointment has been created!\")\n//                            },\n//                         }\n//                     }\n//                 }\n//             }) \n\nlet a = grammar2[\"yes\"]\nlet b = grammar2[\"no\"]\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n        }})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n   \n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")\n        },\n\n\n        query: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: 'menu',\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    \n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n                },\n        nomatch: {\n            entry: say(\"Sorry I don't know that\"),\n        on: { ENDSPEECH: \"prompt\" }\n                }\n                }\n        },\n        confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n    confirm_time: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                target: \"who\"\n            },\n    {cond: (context) => (grammar2[context.recResult] === a),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry, I don't understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-app.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n\t\t    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \tprogress: {\n\t\t\t},\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-app.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"]}}