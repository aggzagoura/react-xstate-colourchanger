{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","grammar2","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","assign","target","ask","nomatch","wholeday","notime","whattime","withtime","Finished","inspect","url","iframe","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.ff7a070a.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\nimport { isBuiltInEvent } from \"xstate/lib/utils\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Mary\": { person: \"Mary Zagoura\" },\n    \"Nick\": { person: \"Nick Katapodis\" },\n    \"Samantha\": { person: \"Samantha Meyers\" },\n    \"Anna\": { person: \"Anna Heathrow\" },\n    \"James\": { person: \"James Smith\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at eight\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\"},\n    \"at eleven\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at twelve\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" }\n}\n\nconst grammar2= { \"yes\": true,\n                  \"Yes\": true,\n                  \"of course\": true,\n                  \"Of course\": true,\n                  \"no\": false,\n                  \"No\":false,\n                  \"no way\": false,\n                  \"No way\": false\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"   \n\n                },\n                { target: \".nomatch\"}]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen(),\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know which day you are talking about\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                        cond: (context) => grammar2[context.recResult] === true,\n                        target: \"notime\"},\n                        {\n                        cond: (context) => grammar2[context.recResult] === false,\n                        target: \"whattime\"\n\n                    },\n                    { target: \".nomatch\"}]\n                },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n                    },\n                    ask: {\n                        entry: listen()\n                    },\n                    nomatch: {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n                    }\n                }\n            },\n            notime: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ \n                            cond: (context) => grammar2[context.recResult] === true,\n                            target: \"Finished\"},\n                            {\n                             cond: (context) => grammar2[\"context.recResult\"] === false,\n                            target: \"who\"\n\n                        },\n                        {target: \".nomatch\"}]\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`  \n                            })),\n                            on: { ENDSPEECH: \"ask\"}\n                        },\n                        ask: {\n                            entry: listen()\n                        },\n                        nomatch: {\n                            entry: say(\"Please repeat it again\"),\n                            on: { ENDSPEECH: \"prompt\" }\n                        }\n                    }\n                },\n                whattime: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n\t\t\t\t\t\t\ttarget: \"withtime\"\n                    \n                        },\n                        { target: \".nomatch\"}]\n                    },\n                    states: {\n                        prompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n                    },\n                    ask: {\n                        entry: listen()\n\n                },\n                nomatch: {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        withtime: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\"},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Please repeat it again\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n                Finished: {\n                        initial: \"prompt\",\n                        on: { ENDSPEECH: \"init\" },\n                        states: {\n                            prompt: { entry: say(\"Your appointment has been created!\")\n                           },\n                        }\n                    }\n                }\n            }) ","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n\t\t    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \tprogress: {\n\t\t\t},\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}