{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["a","grammar2","b","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","target","actions","assign","context","option","recResult","prompt","entry","say","ENDSPEECH","ask","send","query","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","type","value","todo","timer","appointment","who","grammar","person","listen","nomatch","day","wholeday","time","confirm_meeting_whole_day","confirm_time","confirmed","text","fetch","Request","proxyurl","method","headers","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","_context","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.d6cea965.chunk.js","sourcesContent":["// import { MachineConfig, send, Action, assign } from \"xstate\";\n// import { isBuiltInEvent } from \"xstate/lib/utils\";\n\n\n// function say(text: string): Action<SDSContext, SDSEvent> {\n//     return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n// }\n\n// function listen(): Action<SDSContext, SDSEvent> {\n//     return send('LISTEN')\n// }\n\n// const grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n//     \"John\": { person: \"John Appleseed\" },\n//     \"Mary\": { person: \"Mary Zagoura\" },\n//     \"Nick\": { person: \"Nick Katapodis\" },\n//     \"Samantha\": { person: \"Samantha Meyers\" },\n//     \"Anna\": { person: \"Anna Heathrow\" },\n//     \"James\": { person: \"James Smith\" },\n//     \"on Friday\": { day: \"Friday\" },\n//     \"on Monday\": { day: \"Monday\" },\n//     \"on Tuesday\": { day: \"Tuesday\" },\n//     \"on Saturday\": { day: \"Saturday\" },\n//     \"at ten\": { time: \"10:00\" },\n//     \"at 10\": { time: \"10:00\" },\n//     \"at eight\": { time: \"8:00\" },\n//     \"at 8\": { time: \"8:00\"},\n//     \"at eleven\": { time: \"11:00\" },\n//     \"at 11\": { time: \"11:00\" },\n//     \"at twelve\": { time: \"12:00\" },\n//     \"at 12\": { time: \"12:00\" }\n// }\n\n// const grammar2= { \"yes\": true,\n//                   \"Yes\": true,\n//                   \"of course\": true,\n//                   \"Of course\": true,\n//                   \"no\": false,\n//                   \"No\":false,\n//                   \"no way\": false,\n//                   \"No way\": false\n// }\n\n\n// export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n//     initial: 'init',\n//     states: {\n//         init: {\n//             on: {\n//                 CLICK: 'welcome'\n//             }\n//         },\n//         welcome: {\n//             initial: \"prompt\",\n//             on: { ENDSPEECH: \"who\" },\n//             states: {\n//                 prompt: { entry: say(\"Let's create an appointment\") }\n//             }\n//         },\n//         who: {\n//             initial: \"prompt\",\n//             on: {\n//                 RECOGNISED: [{\n//                     cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n//                     actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n//                     target: \"day\"\n\n//                 },\n//                 { target: \".nomatch\" }]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: say(\"Who are you meeting with?\"),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen()\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Sorry I don't know them\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         day: {\n//             initial: \"prompt\",\n//             on: { \n//                 RECOGNISED: [{\n//                     cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n//                     actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n//                     target: \"wholeday\"   \n\n//                 },\n//                 { target: \".nomatch\"}]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: send((context) => ({\n//                         type: \"SPEAK\",\n//                         value: `OK. ${context.person}. On which day is your meeting?`\n//                     })),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen(),\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Sorry I don't know which day you are talking about\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         wholeday: {\n//                 initial: \"prompt\",\n//                 on: {\n//                     RECOGNISED: [{\n//                         cond: (context) => grammar2[context.recResult] === true,\n//                         target: \"notime\"},\n//                         {\n//                         cond: (context) => grammar2[context.recResult] === false,\n//                         target: \"whattime\"\n\n//                     },\n//                     { target: \".nomatch\"}]\n//                 },\n//                 states: {\n//                     prompt: {\n//                         entry: send((context) => ({\n// \t\t\t                type: \"SPEAK\",\n// \t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n// \t\t\t            })),\n// \t\t\t            on: { ENDSPEECH: \"ask\" }\n//                     },\n//                     ask: {\n//                         entry: listen()\n//                     },\n//                     nomatch: {\n// \t\t\t            entry: say(\"Please repeat it again\"),\n// \t\t                on: { ENDSPEECH: \"prompt\" }\n//                     }\n//                 }\n//             },\n//             notime: {\n//                     initial: \"prompt\",\n//                     on: {\n//                         RECOGNISED: [{ \n//                             cond: (context) => grammar2[context.recResult] === true,\n//                             target: \"Finished\"},\n//                             {\n//                              cond: (context) => grammar2[\"context.recResult\"] === false,\n//                             target: \"who\"\n\n//                         },\n//                         {target: \".nomatch\"}]\n//                     },\n//                     states: {\n//                         prompt: {\n//                             entry: send((context) => ({\n//                                 type: \"SPEAK\",\n// \t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`  \n//                             })),\n//                             on: { ENDSPEECH: \"ask\"}\n//                         },\n//                         ask: {\n//                             entry: listen()\n//                         },\n//                         nomatch: {\n//                             entry: say(\"Please repeat it again\"),\n//                             on: { ENDSPEECH: \"prompt\" }\n//                         }\n//                     }\n//                 },\n//                 whattime: {\n//                     initial: \"prompt\",\n//                     on: {\n//                         RECOGNISED: [{\n// \t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n// \t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n// \t\t\t\t\t\t\ttarget: \"withtime\"\n                    \n//                         },\n//                         { target: \".nomatch\"}]\n//                     },\n//                     states: {\n//                         prompt: { entry: say(\"What time is your meeting\"),\n// \t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n//                     },\n//                     ask: {\n//                         entry: listen()\n\n//                 },\n//                 nomatch: {\n// \t\t\t\t\tentry: say(\"Please repeat it again\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//         withtime: {\n//             initial: \"prompt\",\n//             on: {\n//                 RECOGNISED: [{ \n// \t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n// \t\t\t\t\ttarget: \"Finished\"},\n// \t\t\t\t\t{\n// \t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n// \t\t\t\t\ttarget: \"who\"\n\n//                 },\n//                 { target: \".nomatch\" }]\n//             },\n//             states: {\n//                 prompt: {\n//                     entry: send((context) => ({\n//                         type: \"SPEAK\",\n//                         value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n//                     })),\n//                     on: { ENDSPEECH: \"ask\" }\n//                 },\n//                 ask: {\n//                     entry: listen()\n//                 },\n//                 nomatch: {\n//                     entry: say(\"Please repeat it again\"),\n//                     on: { ENDSPEECH: \"prompt\" }\n//                 }\n//             }\n//         },\n//                 Finished: {\n//                         initial: \"prompt\",\n//                         on: { ENDSPEECH: \"init\" },\n//                         states: {\n//                             prompt: { entry: say(\"Your appointment has been created!\")\n//                            },\n//                         }\n//                     }\n//                 }\n//             }) \n\nlet a = grammar2[\"yes\"]\nlet b = grammar2[\"no\"]\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n        }})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n   \n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")\n        },\n\n\n        query: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: 'menu',\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    \n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n                },\n        nomatch: {\n            entry: say(\"Sorry I don't know that\"),\n        on: { ENDSPEECH: \"prompt\" }\n                }\n                }\n        },\n        confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n    confirm_time: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                target: \"who\"\n            },\n    {cond: (context) => (grammar2[context.recResult] === a),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry, I don't understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-app.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n\t\t    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \tprogress: {\n\t\t\t},\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-app.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}